// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sprout_math.proto

#ifndef PROTOBUF_sprout_5fmath_2eproto__INCLUDED
#define PROTOBUF_sprout_5fmath_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sprout_5fmath_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsProcessForecastIntervalImpl();
void InitDefaultsProcessForecastInterval();
void InitDefaultsCountProbabilityImpl();
void InitDefaultsCountProbability();
void InitDefaultsSproutModelImpl();
void InitDefaultsSproutModel();
inline void InitDefaults() {
  InitDefaultsProcessForecastInterval();
  InitDefaultsCountProbability();
  InitDefaultsSproutModel();
}
}  // namespace protobuf_sprout_5fmath_2eproto
namespace Sprout {
class CountProbability;
class CountProbabilityDefaultTypeInternal;
extern CountProbabilityDefaultTypeInternal _CountProbability_default_instance_;
class ProcessForecastInterval;
class ProcessForecastIntervalDefaultTypeInternal;
extern ProcessForecastIntervalDefaultTypeInternal _ProcessForecastInterval_default_instance_;
class SproutModel;
class SproutModelDefaultTypeInternal;
extern SproutModelDefaultTypeInternal _SproutModel_default_instance_;
}  // namespace Sprout
namespace Sprout {

// ===================================================================

class ProcessForecastInterval : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Sprout.ProcessForecastInterval) */ {
 public:
  ProcessForecastInterval();
  virtual ~ProcessForecastInterval();

  ProcessForecastInterval(const ProcessForecastInterval& from);

  inline ProcessForecastInterval& operator=(const ProcessForecastInterval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessForecastInterval(ProcessForecastInterval&& from) noexcept
    : ProcessForecastInterval() {
    *this = ::std::move(from);
  }

  inline ProcessForecastInterval& operator=(ProcessForecastInterval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessForecastInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessForecastInterval* internal_default_instance() {
    return reinterpret_cast<const ProcessForecastInterval*>(
               &_ProcessForecastInterval_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProcessForecastInterval* other);
  friend void swap(ProcessForecastInterval& a, ProcessForecastInterval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessForecastInterval* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessForecastInterval* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProcessForecastInterval& from);
  void MergeFrom(const ProcessForecastInterval& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProcessForecastInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Sprout.CountProbability count_probabilities = 1;
  int count_probabilities_size() const;
  void clear_count_probabilities();
  static const int kCountProbabilitiesFieldNumber = 1;
  const ::Sprout::CountProbability& count_probabilities(int index) const;
  ::Sprout::CountProbability* mutable_count_probabilities(int index);
  ::Sprout::CountProbability* add_count_probabilities();
  ::google::protobuf::RepeatedPtrField< ::Sprout::CountProbability >*
      mutable_count_probabilities();
  const ::google::protobuf::RepeatedPtrField< ::Sprout::CountProbability >&
      count_probabilities() const;

  // @@protoc_insertion_point(class_scope:Sprout.ProcessForecastInterval)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Sprout::CountProbability > count_probabilities_;
  mutable int _cached_size_;
  friend struct ::protobuf_sprout_5fmath_2eproto::TableStruct;
  friend void ::protobuf_sprout_5fmath_2eproto::InitDefaultsProcessForecastIntervalImpl();
};
// -------------------------------------------------------------------

class CountProbability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Sprout.CountProbability) */ {
 public:
  CountProbability();
  virtual ~CountProbability();

  CountProbability(const CountProbability& from);

  inline CountProbability& operator=(const CountProbability& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountProbability(CountProbability&& from) noexcept
    : CountProbability() {
    *this = ::std::move(from);
  }

  inline CountProbability& operator=(CountProbability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CountProbability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountProbability* internal_default_instance() {
    return reinterpret_cast<const CountProbability*>(
               &_CountProbability_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CountProbability* other);
  friend void swap(CountProbability& a, CountProbability& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountProbability* New() const PROTOBUF_FINAL { return New(NULL); }

  CountProbability* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CountProbability& from);
  void MergeFrom(const CountProbability& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CountProbability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double count_probability = 2;
  int count_probability_size() const;
  void clear_count_probability();
  static const int kCountProbabilityFieldNumber = 2;
  double count_probability(int index) const;
  void set_count_probability(int index, double value);
  void add_count_probability(double value);
  const ::google::protobuf::RepeatedField< double >&
      count_probability() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_count_probability();

  // @@protoc_insertion_point(class_scope:Sprout.CountProbability)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > count_probability_;
  mutable int _count_probability_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_sprout_5fmath_2eproto::TableStruct;
  friend void ::protobuf_sprout_5fmath_2eproto::InitDefaultsCountProbabilityImpl();
};
// -------------------------------------------------------------------

class SproutModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Sprout.SproutModel) */ {
 public:
  SproutModel();
  virtual ~SproutModel();

  SproutModel(const SproutModel& from);

  inline SproutModel& operator=(const SproutModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SproutModel(SproutModel&& from) noexcept
    : SproutModel() {
    *this = ::std::move(from);
  }

  inline SproutModel& operator=(SproutModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SproutModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SproutModel* internal_default_instance() {
    return reinterpret_cast<const SproutModel*>(
               &_SproutModel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SproutModel* other);
  friend void swap(SproutModel& a, SproutModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SproutModel* New() const PROTOBUF_FINAL { return New(NULL); }

  SproutModel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SproutModel& from);
  void MergeFrom(const SproutModel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SproutModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Sprout.ProcessForecastInterval intervals = 3;
  int intervals_size() const;
  void clear_intervals();
  static const int kIntervalsFieldNumber = 3;
  const ::Sprout::ProcessForecastInterval& intervals(int index) const;
  ::Sprout::ProcessForecastInterval* mutable_intervals(int index);
  ::Sprout::ProcessForecastInterval* add_intervals();
  ::google::protobuf::RepeatedPtrField< ::Sprout::ProcessForecastInterval >*
      mutable_intervals();
  const ::google::protobuf::RepeatedPtrField< ::Sprout::ProcessForecastInterval >&
      intervals() const;

  // @@protoc_insertion_point(class_scope:Sprout.SproutModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Sprout::ProcessForecastInterval > intervals_;
  mutable int _cached_size_;
  friend struct ::protobuf_sprout_5fmath_2eproto::TableStruct;
  friend void ::protobuf_sprout_5fmath_2eproto::InitDefaultsSproutModelImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessForecastInterval

// repeated .Sprout.CountProbability count_probabilities = 1;
inline int ProcessForecastInterval::count_probabilities_size() const {
  return count_probabilities_.size();
}
inline void ProcessForecastInterval::clear_count_probabilities() {
  count_probabilities_.Clear();
}
inline const ::Sprout::CountProbability& ProcessForecastInterval::count_probabilities(int index) const {
  // @@protoc_insertion_point(field_get:Sprout.ProcessForecastInterval.count_probabilities)
  return count_probabilities_.Get(index);
}
inline ::Sprout::CountProbability* ProcessForecastInterval::mutable_count_probabilities(int index) {
  // @@protoc_insertion_point(field_mutable:Sprout.ProcessForecastInterval.count_probabilities)
  return count_probabilities_.Mutable(index);
}
inline ::Sprout::CountProbability* ProcessForecastInterval::add_count_probabilities() {
  // @@protoc_insertion_point(field_add:Sprout.ProcessForecastInterval.count_probabilities)
  return count_probabilities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Sprout::CountProbability >*
ProcessForecastInterval::mutable_count_probabilities() {
  // @@protoc_insertion_point(field_mutable_list:Sprout.ProcessForecastInterval.count_probabilities)
  return &count_probabilities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Sprout::CountProbability >&
ProcessForecastInterval::count_probabilities() const {
  // @@protoc_insertion_point(field_list:Sprout.ProcessForecastInterval.count_probabilities)
  return count_probabilities_;
}

// -------------------------------------------------------------------

// CountProbability

// repeated double count_probability = 2;
inline int CountProbability::count_probability_size() const {
  return count_probability_.size();
}
inline void CountProbability::clear_count_probability() {
  count_probability_.Clear();
}
inline double CountProbability::count_probability(int index) const {
  // @@protoc_insertion_point(field_get:Sprout.CountProbability.count_probability)
  return count_probability_.Get(index);
}
inline void CountProbability::set_count_probability(int index, double value) {
  count_probability_.Set(index, value);
  // @@protoc_insertion_point(field_set:Sprout.CountProbability.count_probability)
}
inline void CountProbability::add_count_probability(double value) {
  count_probability_.Add(value);
  // @@protoc_insertion_point(field_add:Sprout.CountProbability.count_probability)
}
inline const ::google::protobuf::RepeatedField< double >&
CountProbability::count_probability() const {
  // @@protoc_insertion_point(field_list:Sprout.CountProbability.count_probability)
  return count_probability_;
}
inline ::google::protobuf::RepeatedField< double >*
CountProbability::mutable_count_probability() {
  // @@protoc_insertion_point(field_mutable_list:Sprout.CountProbability.count_probability)
  return &count_probability_;
}

// -------------------------------------------------------------------

// SproutModel

// repeated .Sprout.ProcessForecastInterval intervals = 3;
inline int SproutModel::intervals_size() const {
  return intervals_.size();
}
inline void SproutModel::clear_intervals() {
  intervals_.Clear();
}
inline const ::Sprout::ProcessForecastInterval& SproutModel::intervals(int index) const {
  // @@protoc_insertion_point(field_get:Sprout.SproutModel.intervals)
  return intervals_.Get(index);
}
inline ::Sprout::ProcessForecastInterval* SproutModel::mutable_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:Sprout.SproutModel.intervals)
  return intervals_.Mutable(index);
}
inline ::Sprout::ProcessForecastInterval* SproutModel::add_intervals() {
  // @@protoc_insertion_point(field_add:Sprout.SproutModel.intervals)
  return intervals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Sprout::ProcessForecastInterval >*
SproutModel::mutable_intervals() {
  // @@protoc_insertion_point(field_mutable_list:Sprout.SproutModel.intervals)
  return &intervals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Sprout::ProcessForecastInterval >&
SproutModel::intervals() const {
  // @@protoc_insertion_point(field_list:Sprout.SproutModel.intervals)
  return intervals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sprout

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sprout_5fmath_2eproto__INCLUDED
