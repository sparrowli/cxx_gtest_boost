// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: delivery_forecast.proto

#include "delivery_forecast.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Sprout {
class DeliveryForecastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeliveryForecast>
      _instance;
} _DeliveryForecast_default_instance_;
}  // namespace Sprout
namespace protobuf_delivery_5fforecast_2eproto {
void InitDefaultsDeliveryForecastImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Sprout::_DeliveryForecast_default_instance_;
    new (ptr) ::Sprout::DeliveryForecast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Sprout::DeliveryForecast::InitAsDefaultInstance();
}

void InitDefaultsDeliveryForecast() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeliveryForecastImpl);
}

}  // namespace protobuf_delivery_5fforecast_2eproto
namespace Sprout {

// ===================================================================

void DeliveryForecast::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeliveryForecast::kReceivedOrLostCountFieldNumber;
const int DeliveryForecast::kTimeFieldNumber;
const int DeliveryForecast::kCountsFieldNumber;
const int DeliveryForecast::kThrowawayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeliveryForecast::DeliveryForecast()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_delivery_5fforecast_2eproto::InitDefaultsDeliveryForecast();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Sprout.DeliveryForecast)
}
DeliveryForecast::DeliveryForecast(const DeliveryForecast& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      counts_(from.counts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&received_or_lost_count_, &from.received_or_lost_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&throwaway_) -
    reinterpret_cast<char*>(&received_or_lost_count_)) + sizeof(throwaway_));
  // @@protoc_insertion_point(copy_constructor:Sprout.DeliveryForecast)
}

void DeliveryForecast::SharedCtor() {
  ::memset(&received_or_lost_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throwaway_) -
      reinterpret_cast<char*>(&received_or_lost_count_)) + sizeof(throwaway_));
  _cached_size_ = 0;
}

DeliveryForecast::~DeliveryForecast() {
  // @@protoc_insertion_point(destructor:Sprout.DeliveryForecast)
  SharedDtor();
}

void DeliveryForecast::SharedDtor() {
}

void DeliveryForecast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeliveryForecast& DeliveryForecast::default_instance() {
  ::protobuf_delivery_5fforecast_2eproto::InitDefaultsDeliveryForecast();
  return *internal_default_instance();
}

DeliveryForecast* DeliveryForecast::New(::google::protobuf::Arena* arena) const {
  DeliveryForecast* n = new DeliveryForecast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeliveryForecast::Clear() {
// @@protoc_insertion_point(message_clear_start:Sprout.DeliveryForecast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_.Clear();
  ::memset(&received_or_lost_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throwaway_) -
      reinterpret_cast<char*>(&received_or_lost_count_)) + sizeof(throwaway_));
  _internal_metadata_.Clear();
}

bool DeliveryForecast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Sprout.DeliveryForecast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 received_or_lost_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_or_lost_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 counts = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_counts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 throwaway = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &throwaway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Sprout.DeliveryForecast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Sprout.DeliveryForecast)
  return false;
#undef DO_
}

void DeliveryForecast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Sprout.DeliveryForecast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 received_or_lost_count = 1;
  if (this->received_or_lost_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->received_or_lost_count(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // repeated uint32 counts = 3 [packed = true];
  if (this->counts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _counts_cached_byte_size_));
  }
  for (int i = 0, n = this->counts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->counts(i), output);
  }

  // uint64 throwaway = 4;
  if (this->throwaway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->throwaway(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:Sprout.DeliveryForecast)
}

size_t DeliveryForecast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sprout.DeliveryForecast)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated uint32 counts = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _counts_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 received_or_lost_count = 1;
  if (this->received_or_lost_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->received_or_lost_count());
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint64 throwaway = 4;
  if (this->throwaway() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->throwaway());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliveryForecast::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeliveryForecast*>(&from));
}

void DeliveryForecast::MergeFrom(const DeliveryForecast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Sprout.DeliveryForecast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counts_.MergeFrom(from.counts_);
  if (from.received_or_lost_count() != 0) {
    set_received_or_lost_count(from.received_or_lost_count());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.throwaway() != 0) {
    set_throwaway(from.throwaway());
  }
}

void DeliveryForecast::CopyFrom(const DeliveryForecast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sprout.DeliveryForecast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryForecast::IsInitialized() const {
  return true;
}

void DeliveryForecast::Swap(DeliveryForecast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeliveryForecast::InternalSwap(DeliveryForecast* other) {
  using std::swap;
  counts_.InternalSwap(&other->counts_);
  swap(received_or_lost_count_, other->received_or_lost_count_);
  swap(time_, other->time_);
  swap(throwaway_, other->throwaway_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DeliveryForecast::GetTypeName() const {
  return "Sprout.DeliveryForecast";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Sprout

// @@protoc_insertion_point(global_scope)
